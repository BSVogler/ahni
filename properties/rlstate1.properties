#random.seed=1234567
run.name=tmaze-plastic-risi
run.reset=true
num.runs=1

###########
# evolution
###########
num.generations=10000
popul.size=500

performance.target=1
performance.target.type=higher

#false means mutation probabilities are applied to all possible places a mutation could occur
#true means probabilities apply to individual as a whole; only one topological mutation can occur per individual
#note that this applies only to topological mutations, not weight mutations
topology.mutation.classic=true

#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.03
add.neuron.mutation.rate=0.03
#classic=[0.01, 0.5], not classic=[0.0001,] dependent on pop size. 0.4
add.connection.mutation.rate=0.1
#[0.01, 0.3]
remove.connection.mutation.rate=0.05
#only remove weights with magnitude smaller than this
remove.connection.max.weight=50

#should be 1.0
prune.mutation.rate=1.0

#[0.1, 0.8]. 0.5, 0.6
weight.mutation.rate=0.7
#[1.0, 2.0] dependent on weight.max/min?
weight.mutation.std.dev=0.5


#percent of individuals used as parents
survival.rate=0.1
#proportion of sexual (crossover) versus asexual reproduction
crossover.proportion=0.5

#[1, 5]
selector.elitism.min.specie.size=5
#percent of individuals from each species copied to next generation unchanged
selector.elitism.proportion=0.1
#min number to select from a species (if it has size >=  selector.elitism.min.specie.size)
selector.elitism.min.to.select=0
selector.roulette=false
selector.max.stagnant.generations=500
selector.speciated.fitness=true


############
# speciation
############
#species distance factors
#c1, excess genes factor [1.0, 2.0]
chrom.compat.excess.coeff=2.0
#c2, disjoint genes factor [1.0, 2.0]
chrom.compat.disjoint.coeff=2.0
#c3, Weight difference factor [0.2, 3.0]
chrom.compat.common.coeff=1.0

#compatability threshold [0.1, 4.0], relative to c#
speciation.threshold=2.0
speciation.target=20
speciation.threshold.change=0.1


##################
# fitness function
##################
fitness_function.class=com.ojcoleman.ahni.experiments.RLStateBased
#max threads to use for fitness evaluation (including transcription of genotype/cppn to phenotype/substrate)
#if value is <= 0 then the detected number of processor cores will be used
fitness.max_threads=0

#experiment specific
#The initial number of states in the generated environments.
fitness.function.rlstate.states.initial=5
#The amount to increase the number of states in the generated environments when the current size has been sufficiently mastered.
#If the value is followed by an "x" then the value is considered a factor (and so should be > 1).
fitness.function.rlstate.states.delta=0
#The maximum amount to increase the number of states in the generated environments to.
fitness.function.rlstate.states.maximum=10
#The initial number of actions available in the generated environments.
fitness.function.rlstate.actions.initial=2
#The amount to increase the available number of actions in the generated environments when the current size has been sufficiently mastered (see {@link #DIFFICULTY_INCREASE_PERFORMANCE}.
#the value is followed by an "x" then the value is considered a factor (and so should be > 1).
fitness.function.rlstate.actions.delta=0
#The maximum amount to increase the available number of actions in the generated environments to.
fitness.function.rlstate.actions.maximum=2
#The performance indicating when the environment size/difficulty should be increased as the current size has been sufficiently mastered. Performance is calculated
#as a proportion of the maximum possible fitness (which is the sum of 
fitness.function.rlstate.difficulty.increase.performance=0.9
#The proportion of actions that will map to some other state. This is evaluated probabilistically for all states and actions when generating an environment.
fitness.function.rlstate.action.map.ratio=1
#The proportion of states that will contain a reward value greater than 0. A value of 0 will force only 1 state to have a reward.
fitness.function.rlstate.states.reward.ratio=0
#The number of environments to evaluate candidates against. Increasing this will provide a more accurate evaluation but take longer.
fitness.function.rlstate.environment.count=100


################
# CPPN/AnjiNet #
################
#input and output size determined by hyperneat settings
#stimulus.size=7
#response.size=1
initial.topology.activation=random
initial.topology.fully.connected=true
initial.topology.num.hidden.neurons=0
initial.topology.activation.input=linear
# Using an activation function with range [0, 1] or [-1, 1] causes the transcriber to scale the output to the substrate weight range, rather than truncating it to that range.
initial.topology.activation.output=tanh
initial.topology.activation.random.allowed=absolute, sigmoid, gaussian, sine
#initial.topology.activation.random.probabilities=0.2, 1, 0.5, 0.5, 0.2, 0.1

recurrent=disallowed
recurrent.cycles=1
#[1, 500]
#weight.min=-20
weight.max=50


#####################
# HyperNEAT/BainNN #
#####################
ann.transcriber.class=com.ojcoleman.ahni.transcriber.HyperNEATTranscriberBain
ann.hyperneat.bain.executionmode=SEQ

ann.hyperneat.bain.neuron.model=com.ojcoleman.bain.neuron.rate.RisiModulatoryNeuronCollection
ann.hyperneat.bain.synapse.model=com.ojcoleman.bain.synapse.rate.RisiModulatorySynapseCollection

# Create CPPN outputs that set the parameters for each synapse.
ann.hyperneat.bain.synapse.model.params=n,a,b,c
# Min and max values for model parameters.
ann.hyperneat.bain.synapse.model.params.min=-10,-1,-1,-1
ann.hyperneat.bain.synapse.model.params.max=10,1,1,1
# Two synapse types: regular = 0, modulatory = 1
# Separate weight outputs from CPPN will be used for each type. 
ann.hyperneat.bain.synapse.model.types=modulatory,0,1
# This parameter in the synapse model will be set to 0 if the connection should not be expressed. This is typically applied to a "learning rate" parameter.
ann.hyperneat.bain.synapse.model.plasticitydisableparam=n

ann.hyperneat.feedforward=true
#For networks with recurrent connections, the number of activation cycles to perform each time the substrate network is presented with new input and queried for its output. 
#ann.hyperneat.cyclesperstep=2
ann.hyperneat.enablebias=true
ann.hyperneat.includedelta=true
ann.hyperneat.includeangle=false
ann.hyperneat.useinputlayerencoding=true

ann.hyperneat.connection.expression.threshold=0.3
#ann.hyperneat.leo=true

#ann.hyperneat.connection.weight.min=-2
ann.hyperneat.connection.weight.max=10

# 2D substrate with XY axes (ignore z/depth)
ann.hyperneat.depth=3
# input and output layer dimensions determined by fitness function (it places them in XY plane, with y=[0, 0.25] as input layer and y=1 as output layer]
ann.hyperneat.width=f,4,f
ann.hyperneat.height=f,2,f
ann.hyperneat.range.x=-1,1
ann.hyperneat.range.y=-1,1
ann.hyperneat.range.z=-1,1


#############
# persistence
#############
persistence.class=com.anji.persistence.FilePersistence
persistence.base.dir=./db
persist.enable=false
persist.all=false
persist.champions=false
persist.last=false
persist.load.genotype=false
id.file=./db/id.xml
neat.id.file=./db/neatid.xml

##############
# presentation
##############
presentation.generate=false
presentation.dir=./nevt

#########
# logging
#########
# How often to produce a line in the log containing a brief summary of the current progress.
log.pergenerations=1

# FileAppenders with the name RunLog receive special treatment: for each run the output will be directed to a file 
# with the name specified by log4j.appender.RunLog.File in the directory [output.dir]/[run number]/
#log4j.rootLogger=INFO, C, RunLog
log4j.rootLogger=INFO, C, RunLog
log4j.appender.C=org.apache.log4j.ConsoleAppender
log4j.appender.RunLog=org.apache.log4j.FileAppender
log4j.appender.RunLog.File=log.txt
log4j.appender.C.layout=org.apache.log4j.PatternLayout
log4j.appender.RunLog.layout=org.apache.log4j.PatternLayout
log4j.appender.C.layout.ConversionPattern=%-5p %m%x%n
log4j.appender.RunLog.layout.ConversionPattern=%-5p %m%x%n

################
# other output #
################
output.dir=../tmaze-plastic-risi
# Whether to log the champ to a text file and/or image. N < 0 indicates no logging, N=0 indicates 
# only at the end of evolution, N > 0 indicates every N generations and after evolution has finished.
log.champ.tostring=25
log.champ.toimage=25


#######################################
# parameter tuning via ParameterTuner #
#######################################

parametertuner.totune=       add.neuron.mutation.rate, add.connection.mutation.rate, weight.mutation.rate, weight.mutation.std.dev, ann.hyperneat.connection.weight.max, weight.max
parametertuner.initialvalues=0.01,                     1.0,                          0.5,                  0.5,                     50,                                  10
parametertuner.minvalues=    0,                        0,                            0,                    0.01,                    0.01,                                0.01
parametertuner.maxvalues=    1,                        1,                            1,                    10,                      100,                                 50
parametertuner.initialvalueadjustfactor=2
parametertuner.numruns=50
parametertuner.numgens=250
parametertuner.solvedperformance=0.98
parametertuner.htcondor=\
  executable = ../ahni.jar \n \
  jar_files = ../ahni.jar
